import React, { useState } from "react";
import imm1 from "../../img/WMNS+AIR+JORDAN+1.jpg";
import TComments from "../../Types/TComments";
import { useEffect } from "react";
import apisphp from "../../Service/api";
import { useParams } from "react-router-dom";
import { postComment } from "./CommentsAdd";
import TUser from "../../Types/TUsers";
import { handleDislike, handleLike } from "./LikeAndDislike";

type Props = {};

const CommentSection = ({ commentId }: any) => {
  const { id } = useParams();
  const [likeCounts, setLikeCounts] = useState<Record<number, number>>({});
  const [dislikeCounts, setDislikeCounts] = useState<Record<number, number>>(
    {}
  );

  const [openSection, setOpenSection] = useState(null);
  const [visibleCommentsCount, setVisibleCommentsCount] = useState(3);
  const [comment, setComments] = useState<TComments[]>([]);
  const [newComment, setNewComment] = useState<TComments>({
    comment_id: 0,
    product_id: Number(id),
    user_id: 1,
    user: {} as TUser,
    content: "",
    rating: 0,
    like_count: 0,
    dislike_count: 0,
    reported: false,
    created_at: "",
    updated_at: "",
  });
  const [menuVisibleCommentId, setMenuVisibleCommentId] = useState<
    number | null
  >(null);

  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n hi·ªÉn th·ªã
  const visibleComments = comment.slice(0, visibleCommentsCount);

  const toggleSection = (section: any) => {
    setOpenSection(openSection === section ? null : section);
  };

  // l·∫•y data t·ª´ b√™n server show ra ng∆∞·ªùi dung
  useEffect(() => {
    const fetchDataComments = async () => {
      try {
        // ƒëo·∫°n n√†y s·∫Ω l·∫•y data comments
        const commetsResponse = await apisphp.get(`/getall/comments/${id}`);
        setComments(commetsResponse.data.data);
        console.log(commetsResponse);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchDataComments();
  }, []);

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t Post Comment
  const handlePostComment = async () => {
    const commentData = { ...newComment };

    if (commentData.content.trim()) {
      try {
        console.log("Posting Comment:", commentData);
        const createdComment = await postComment(commentData);
        setComments([createdComment, ...comment]); // Th√™m b√¨nh lu·∫≠n m·ªõi v√†o ƒë·∫ßu danh s√°ch
        setNewComment({ ...newComment, content: "", rating: 0 }); // Reset n·ªôi dung v√† ƒë√°nh gi√°
      } catch (error) {
        console.error("Error posting comment:", error);
      }
    } else {
      alert("Vui l√≤ng nh·∫≠p n·ªôi dung tr∆∞·ªõc khi ƒëƒÉng!");
    }
  };

  // x·ªï menu
  const handleMenuToggle = (commentId: number) => {
    setMenuVisibleCommentId(
      menuVisibleCommentId === commentId ? null : commentId
    );
  };

  const handleEditComment = (commentId: number) => {
    alert(`Edit comment ID: ${commentId}`);
  };

  const handleDeleteComment = (commentId: number) => {
    alert(`Delete comment ID: ${commentId}`);
  };

  // h√†m n√†y ƒë·ªÉ l∆∞u rating
  const handleRatingSelect = (star: number) => {
    setNewComment({ ...newComment, rating: star });
  };

  // h√†m n√†y ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi√° tr·ªã number ·ªü db sang bi·∫øu t∆∞·ªüng h√¨nh sao
  const renderStars = (rating: any) => {
    return "‚òÖ".repeat(rating);
  };

  const handleEnterPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault(); // NgƒÉn xu·ªëng d√≤ng
      handlePostComment(); // G·ªçi h√†m ƒëƒÉng b√¨nh lu·∫≠n
    }
  };

  // T·∫£i s·ªë l∆∞·ª£ng like/dislike t·ª´ localStorage khi component mount
  useEffect(() => {
    comment.forEach((com) => {
      const storedLikes = localStorage.getItem(`likes_${com.comment_id}`);
      const storedDislikes = localStorage.getItem(`dislikes_${com.comment_id}`);
      setLikeCounts((prev) => ({
        ...prev,
        [com.comment_id]: storedLikes ? parseInt(storedLikes) : 0,
      }));
      setDislikeCounts((prev) => ({
        ...prev,
        [com.comment_id]: storedDislikes ? parseInt(storedDislikes) : 0,
      }));
    });
  }, [comment]);

  return (
    <>
      {/* Description Additional information Reviews */}
      <div className="w-full border-t border-gray-300 mt-[50px]">
        {/* ƒê√°nh gi√° */}
        <div className="border-b border-gray-300">
          <div
            className="flex justify-between items-center px-4 py-3 font-semibold cursor-pointer"
            onClick={() => toggleSection("reviews")}
          >
            <span className="text-lg">ƒê√°nh gi√° ({comment.length})</span>
            <span className="text-xl">
              {openSection === "reviews" ? "‚ñ≤" : "‚ñº"}
            </span>
          </div>
          {openSection === "reviews" && (
            <div className="w-full border-t border-gray-300 p-4 md:p-8">
              <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-4">
                <h2 className="text-4xl font-bold">
                  4.9 <span className="text-green-500">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</span>
                </h2>
              </div>

              {/* L·ªçc v√† s·∫Øp x·∫øp */}
              <div className="flex flex-col md:flex-row items-center justify-between mb-6">
                <div className="flex space-x-2 mb-4 md:mb-0">
                  {[5, 4, 3, 2, 1].map((star) => (
                    <button
                      key={star}
                      className={`px-3 py-1 border rounded ${
                        newComment.rating === star
                          ? "bg-yellow-400 text-white"
                          : "hover:bg-gray-200"
                      }`}
                      onClick={() => handleRatingSelect(star)}
                    >
                      ‚òÖ {star}
                    </button>
                  ))}
                </div>
                <div className="w-full md:w-auto">
                  <select className="w-full md:w-auto border border-gray-300 px-3 py-1 rounded">
                    <option value="newest">T·∫•t C·∫£</option>
                    <option value="newest">H√¨nh ·∫¢nh</option>
                    <option value="oldest">Video</option>
                  </select>
                </div>
              </div>

              {/* Danh s√°ch b√¨nh lu·∫≠n */}
              <div className="space-y-4">
                {visibleComments.map((com: TComments) => (
                  <div key={com.comment_id} className="border-b pb-4 mb-4">
                    <div className="grid grid-cols-5 gap-4">
                      <div className="col-span-1 row-span-2 flex flex-col items-center justify-center text-green-500 space-y-2">
                        <div>{renderStars(com.rating)}</div>
                        <img
                          src="https://via.placeholder.com/50"
                          alt="User Avatar"
                          className="w-12 h-12 rounded-full"
                        />
                      </div>

                      <div className="col-span-4 flex flex-col md:flex-row items-start md:items-center space-y-2 md:space-y-0 md:space-x-3">
                        <span className="font-semibold">
                          {com.user ? com.user.first_name : "Unknown User"}
                        </span>

                        <span className="text-gray-500 text-sm">
                          {com.created_at}
                        </span>
                      </div>

                      <div className="col-span-4 row-span-1">
                        <p className="text-gray-700 text-left">{com.content}</p>
                        <div className="col-span-4 flex items-center mt-2 space-x-4 text-sm text-gray-500">
                          <button className="hover:text-black">ƒê·ªçc th√™m</button>
                          <button className="hover:text-black">
                            B√°o c√°o ƒë√°nh gi√°
                          </button>

                          {/* ph·∫ßn n√†y x·ª≠ l√≠ n√∫t like v√† dislike fake */}
                          <div className="flex items-center space-x-1">
                            <button
                              onClick={() =>
                                handleLike(
                                  com.comment_id,
                                  likeCounts,
                                  setLikeCounts
                                )
                              }
                              className="hover:text-black"
                            >
                              üëç
                            </button>
                            <span>{likeCounts[com.comment_id] || 0}</span>
                            <button
                              onClick={() =>
                                handleDislike(
                                  com.comment_id,
                                  dislikeCounts,
                                  setDislikeCounts
                                )
                              }
                              className="hover:text-black"
                            >
                              üëé
                            </button>
                            <span>{dislikeCounts[com.comment_id] || 0}</span>
                          </div>

                          <div className="relative">
                            <button
                              style={{ fontSize: "15px" }}
                              onClick={() => handleMenuToggle(com.comment_id)}
                            >
                              ...
                            </button>
                            {menuVisibleCommentId === com.comment_id && (
                              <div className="absolute right-[-60px] bg-white border p-2 shadow-lg rounded-md">
                                <button
                                  key={com.comment_id}
                                  onClick={() =>
                                    handleEditComment(com.comment_id)
                                  }
                                  className="block px-2 py-1 hover:bg-gray-100"
                                >
                                  S·ª≠a
                                </button>
                                <button
                                  onClick={() =>
                                    handleDeleteComment(com.comment_id)
                                  }
                                  className="block px-2 py-1 hover:bg-gray-100"
                                >
                                  X√≥a
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Post Comment */}
              <textarea
                className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-300"
                placeholder="Vi·∫øt b√¨nh lu·∫≠n c·ªßa b·∫°n..."
                rows={4}
                value={newComment.content}
                onChange={(e) =>
                  setNewComment({ ...newComment, content: e.target.value })
                }
                onKeyDown={handleEnterPress}
                style={{
                  resize: "none", // NgƒÉn ng∆∞·ªùi d√πng thay ƒë·ªïi k√≠ch th∆∞·ªõc
                  overflowWrap: "break-word", // Ng·∫Øt t·ª´ d√†i khi ƒë·∫°t chi·ªÅu r·ªông t·ªëi ƒëa
                  whiteSpace: "pre-wrap", // Gi·ªØ nguy√™n kho·∫£ng tr·∫Øng v√† ng·∫Øt d√≤ng t·ª± ƒë·ªông
                }}
              />

              {/* Link ƒë·∫øn Xem th√™m b√¨nh lu·∫≠n / ·∫®n b√¨nh lu·∫≠n */}
              <div className="flex justify-center mt-4">
                <a
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    setVisibleCommentsCount(
                      visibleCommentsCount < comment.length
                        ? visibleCommentsCount + 3
                        : 3
                    );
                  }}
                  className="text-sm text-gray-500 hover:underline"
                >
                  {visibleCommentsCount < comment.length
                    ? "Xem th√™m b√¨nh lu·∫≠n"
                    : "·∫®n b√¨nh lu·∫≠n"}
                </a>
              </div>
            </div>
          )}
        </div>

        {/* M√¥ t·∫£ */}
        <div className="border-b border-gray-300">
          <div
            className="flex justify-between items-center px-4 py-3 font-semibold cursor-pointer"
            onClick={() => toggleSection("description")}
          >
            <span className="text-lg">M√¥ t·∫£</span>
            <span className="text-xl">
              {openSection === "description" ? "‚ñ≤" : "‚ñº"}
            </span>
          </div>
          {openSection === "description" && (
            <div className="px-4 py-2 text-gray-600">
              <div className="grid grid-cols-4 grid-rows-5 gap-2">
                <div className="col-span-2 row-span-4 flex items-center justify-center">
                  <span className="text-left">
                    Gi√†y Th·ªÉ Thao Nike Air Jordan 1 High OG UNC University Blue
                    555088-134 575441-134 M√†u Xanh Tr·∫Øng l√† ƒë√¥i gi√†y th·ªùi trang
                    c√≥ thi·∫øt k·∫ø tr·∫ª trung, nƒÉng ƒë·ªông ƒë·∫øn t·ª´ th∆∞∆°ng hi·ªáu Nike n·ªïi
                    ti·∫øng c·ªßa M·ªπ. Nike Air Jordan 1 High OG UNC University Blue
                    555088-134 575441-134 ƒë∆∞·ª£c l√†m t·ª´ ch·∫•t li·ªáu cao c·∫•p mang l·∫°i
                    c·∫£m gi√°c tho·∫£i m√°i khi ƒëi l√™n ch√¢n.
                  </span>
                </div>
                <div className="row-span-2 col-start-3">
                  <img src={imm1} alt="" />
                </div>
                <div className="row-span-2 col-start-4 row-start-3">
                  <img src={imm1} alt="" />
                </div>
                <div className="row-span-2 col-start-3 row-start-3">
                  <img src={imm1} alt="" />
                </div>
                <div className="row-span-2 col-start-4 row-start-1">
                  <img src={imm1} alt="" />
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Th√¥ng tin chi ti·∫øt */}
        <div className="border-b border-gray-300">
          <div
            className="flex justify-between items-center px-4 py-3 font-semibold cursor-pointer"
            onClick={() => toggleSection("details")}
          >
            <span className="text-lg">Th√¥ng tin chi ti·∫øt</span>
            <span className="text-xl">
              {openSection === "details" ? "‚ñ≤" : "‚ñº"}
            </span>
          </div>
          {openSection === "details" && (
            <div className="px-4 py-6 text-gray-600 bg-white rounded-md ">
              <h3 className="text-xl font-bold mb-4">
                Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
                <div>
                  <h4 className="font-semibold text-lg">M√¥ t·∫£ s·∫£n ph·∫©m</h4>
                  <p className="text-gray-700 mt-1">
                    Gi√†y Th·ªÉ Thao Nike Air Jordan 1 High OG UNC University Blue
                    c√≥ thi·∫øt k·∫ø tr·∫ª trung, ph√π h·ª£p cho c√°c ho·∫°t ƒë·ªông th·ªÉ thao v√†
                    th·ªùi trang.
                  </p>
                </div>

                <div>
                  <h4 className="font-semibold text-lg">Ch·∫•t li·ªáu</h4>
                  <p className="text-gray-700 mt-1">
                    Da th·∫≠t, cao su t·ª± nhi√™n, v√† v·∫≠t li·ªáu cao c·∫•p gi√∫p tƒÉng ƒë·ªô
                    b·ªÅn v√† mang l·∫°i c·∫£m gi√°c tho·∫£i m√°i.
                  </p>
                </div>

                <div>
                  <h4 className="font-semibold text-lg">K√≠ch th∆∞·ªõc</h4>
                  <p className="text-gray-700 mt-1">
                    Size: 38 - 44, Ph√π h·ª£p v·ªõi k√≠ch c·ª° ch√¢n t·ª´ 24cm ƒë·∫øn 28cm.
                  </p>
                </div>

                <div>
                  <h4 className="font-semibold text-lg">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h4>
                  <p className="text-gray-700 mt-1">
                    V·ªá sinh b·∫±ng khƒÉn m·ªÅm, tr√°nh ti·∫øp x√∫c v·ªõi n∆∞·ªõc v√† c√°c h√≥a
                    ch·∫•t m·∫°nh ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô b·ªÅn c·ªßa s·∫£n ph·∫©m.
                  </p>
                </div>

                <div className="col-span-1 md:col-span-2">
                  <h4 className="font-semibold text-lg">Th√¥ng tin b·∫£o h√†nh</h4>
                  <p className="text-gray-700 mt-1">
                    B·∫£o h√†nh 6 th√°ng cho c√°c l·ªói do nh√† s·∫£n xu·∫•t.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default CommentSection;
